import { ConfigurableModuleBuilder } from '@nestjs/common'
import { merge } from 'lodash'

export interface <%= className %>Config {
    database: {
        url: string
        logging: 'all_queries' | 'long_queries'
        maxQueryExecutionTime: number
    }
    api?: {
        nats?: boolean
        graphql?: boolean
    }
}

export const DEFAULT_<%= constantName %>_CONFIG: Pick<<%= className %>Config, 'api'> = {
    api: {
        nats: true,
        graphql: true,
    },
}

export function patch<%= className %>Config(
    config: Pick<
        typeof <%= constantName %>_OPTIONS_TYPE,
        keyof typeof DEFAULT_<%= constantName %>_CONFIG
    >,
) {
    if (config) {
        Object.assign(
            config,
            merge(DEFAULT_<%= constantName %>_CONFIG, config),
        ) as typeof <%= constantName %>_OPTIONS_TYPE
    }
    return config
}

export const {
    ConfigurableModuleClass: <%= className %>ConfigurableModuleClass,
    MODULE_OPTIONS_TOKEN: <%= constantName %>_CONFIG,
    ASYNC_OPTIONS_TYPE: <%= constantName %>_ASYNC_OPTIONS_TYPE,
    OPTIONS_TYPE: <%= constantName %>_OPTIONS_TYPE,
} = new ConfigurableModuleBuilder<<%= className %>Config, 'forRoot'>({
    optionsInjectionToken: `<%= constantName %>_CONFIG`,
}).build()
