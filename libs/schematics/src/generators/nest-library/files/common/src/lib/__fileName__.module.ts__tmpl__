import { DynamicModule, Module, Provider, Type } from '@nestjs/common'
import {
    <%= className %>ConfigurableModuleClass,
    <%= constantName %>_CONFIG,
    <%= constantName %>_OPTIONS_TYPE,
    patch<%= className %>Config,
} from './<%= fileName %>-configs/<%= fileName %>-module.config'
import { <%= className %>Resolver } from './<%= fileName %>-graphql/<%= fileName %>.resolver'
import { HEALTH_CHECKS_PROVIDER } from '@tematools/health-checks'
import { <%= className %>PrismaConnectionHealthIndicator } from './<%= fileName %>-indicators/<%= fileName %>-prisma-connection.health'
import { <%= className %>PrismaService } from './<%= fileName %>-services/<%= fileName %>-prisma.service'
import { <%= className %>NatsController } from './<%= fileName %>-nats/<%= fileName %>-nats.controller'
import { CustomInjectorModule } from 'nestjs-custom-injector'

@Module({})
export class <%= className %>Module extends <%= className %>ConfigurableModuleClass {
    static forRoot(options: typeof <%= constantName %>_OPTIONS_TYPE): DynamicModule {
        const imports: any[] = [CustomInjectorModule]
        const controllers: Type<any>[] = []
        const exports: any[] = [<%= constantName %>_CONFIG]
        const providers: Provider[] = [
            <%= className %>PrismaService.instance
                ? {
                      provide: <%= className %>PrismaService,
                      useValue: <%= className %>PrismaService.instance,
                  }
                : {
                      provide: <%= className %>PrismaService,
                      useClass: <%= className %>PrismaService,
                  },
            {
                provide: HEALTH_CHECKS_PROVIDER,
                useClass: <%= className %>PrismaConnectionHealthIndicator,
            },
            {
                provide: <%= constantName %>_CONFIG,
                useValue: patch<%= className %>Config(options),
            },
        ]

        if (options.api?.graphql !== false) {
            providers.push(<%= className %>Resolver)
            exports.push(<%= className %>Resolver)
        }

        if (options.api?.nats !== false) {
            controllers.push(<%= className %>NatsController)
        }

        return {
            module: <%= className %>Module,
            imports,
            controllers,
            providers,
            exports,
        }
    }
}
