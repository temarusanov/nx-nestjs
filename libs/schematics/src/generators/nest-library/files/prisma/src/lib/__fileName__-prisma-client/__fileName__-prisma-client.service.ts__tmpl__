import {
  Inject,
  Injectable,
  Logger,
  OnModuleDestroy,
  OnModuleInit,
} from '@nestjs/common';
import { PrismaClient } from '@prisma/<%= fileName %>-client';
import {
  <%= className %>PrismaClientConfig,
  <%= constantName %>_PRISMA_CLIENT_CONFIG,
} from './<%= fileName %>-prisma-client.config';

@Injectable()
export class <%= className %>PrismaClientService
  extends PrismaClient
  implements OnModuleInit, OnModuleDestroy
{
  public static instance: <%= className %>PrismaClientService;

  private logger = new Logger(<%= className %>PrismaClientService.name);

  constructor(
      @Inject(<%= constantName %>_PRISMA_CLIENT_CONFIG)
      private readonly config: <%= className %>PrismaClientConfig,
  ) {
    super({
      datasources: {
        db: {
          url: config.databaseUrl,
        },
      },
      log: [
        {
          emit: 'event',
          level: 'query',
        },
        {
          emit: 'event',
          level: 'error',
        },
      ],
    });
    <%= className %>PrismaClientService.instance = this;
  }

  async onModuleInit(): Promise<void> {
    this.logger.log('onModuleInit');
    try {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-extra-semi
      ;(this as any).$on('query', (e) => {
        if (this.config.logging === 'all_queries') {
          if (e.query !== 'SELECT 1') {
            this.logger.log(
              `query: ${e.query}, params: ${e.params}, duration: ${e.duration}`
            );
          }
        }
        if (this.config.logging === 'long_queries') {
          if (e.duration >= this.config.maxQueryExecutionTime) {
            this.logger.warn(
              `query is slow: ${e.query}, params: ${e.params}, execution time: ${e.duration}`
            );
          }
        }
      });
      await this.$connect();
      setInterval(
        () =>
          this.$queryRaw`SELECT 1`.catch((err) =>
            this.logger.error(err, err.stack)
          ),
        5 * 60000
      );
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (err: any) {
      if (!String(err).includes('fake')) {
        this.logger.error(err, err.stack);
      }
      this.$disconnect();
    }
  }

  async onModuleDestroy(): Promise<void> {
    this.logger.log('onModuleDestroy');
    await this.$disconnect();
  }
}
